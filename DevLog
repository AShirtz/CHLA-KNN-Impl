This file contains all of the things I left for later...

	Of course, the big one is that all of this code
	is meant for 3D. Ideally, dimension should be compile
	or run time determined. This is a windmill for another day.


	Eh, I guess I should put "Finish this document" in here, 
	but that feels bad. I've been working with recursive methods
	perhaps a bit too much...

	(10/3) Where I left off was: 9tc.c & Queries.c 
	I was process of implementing/experimenting the kNN
	query. 


(10/3)
	Came back to it today, doing some amount of prep for the kNN impl,
	Ran some of the tests, as I added a cleanupLatAddr function, and found some
	tests that were SegFaulting. Probably not an issue, just file names or
	something, but I should look into it and make it so that it doesn't do that.
	Cosmetic reasons yeah? 
		After some digging, I found that it is because 6tc.c doesn't use
		the data members built into DataPointEntry, so writing/reading
		doesn't work with the new version of the object...

	So I'm going to bed again, odd how I have to continue doing that.
	Anywho, I'm about half done with the kNN impl, but it's not in the Queries.c
	file, as I spent all of tonight chasing ghosts and getting a context. See
	the src/test/10tc.c file to see how to do the first half of the kNN callback.
	I have the bounding volume and common prefix length finding. I should do 
	a little bit of tree behavior cleanup next.

	Specifically, I currently have the two functions nodeInsert and nodeTraverse,
	which travel along a CanAddr and flood under the given node. These two behaviors
	have more uses than is currently allowed so they should be refactored into a
	more general form. As an example, nodeInsert becomes nodeTraverse and nodeTraverse
	becomes nodeFlood. The new function nodeTraverse hase callbacks for the following
	tree navigation events; intermediate node hit, leaf node hit, depth expended, etc.
	What I am going for here, is a general use function for tree navigation...

(10/21)
	Another break, as things have been a tad hectic. After running some tests
	to get an idea of runtime, I decided that I would need something I am referring
	to as 'Selective Flooding'. I feel that this may already be a known behavior, 
	whether it be through this name or not. The basic idea behind this is to determine
	which branches of the tree to traverse. Some branches can be ignored altogether, 
	some will have all sub-branches visited fully. There are 3 possible outcomes;
	No Flooding, Full Flooding, and Selective Flooding. The condition that determines
	which behavior is applied to which child is as follows: A tile can be thought of 
	as an approximation of a ball, which will have a radius. We are attempting to 
	capture all leaf nodes that fall within a defined ball. Comparing the distance
	from the center of our search ball to the center of the tile's ball against 
	the radius of the tiles ball added to the radius of our search ball, we can 
	have a reasonable assurance that the tile in question does not contain any data
	point that will be contained in our search ball.

	I identified a few functions that would be required for this process, and have
	implemented some of them. These include: convertTupleToLatAddr, 
	convertCanAddrtToLatAddr, applyBMatrixToLatAddr.

	What yet remains to be implemented as far as Selective Flooding goes are;
	Selective Flooding selector (Which version of Flooding should be applied 
	to this child?) and an appropriate tree traversal function that uses the 
	Selective Flooding selector.

	Afterwards, the implementation of kNN can be written.
